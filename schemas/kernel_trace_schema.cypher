// Universal LTTng Kernel Trace Schema\n// Generated schema for property graph analysis\n\n// Drop existing constraints and indexes\nCALL db.constraints() YIELD name\nCALL apoc.util.map(name, 'DROP CONSTRAINT ' + name + ' IF EXISTS') YIELD value\nCALL db.awaitIndexes()\n\nCALL db.indexes() YIELD name\nCALL apoc.util.map(name, 'DROP INDEX ' + name + ' IF EXISTS') YIELD value\nCALL db.awaitIndexes()\n\n// Create constraints for data integrity and performance\nCREATE CONSTRAINT process_pid IF NOT EXISTS FOR (n:Process) REQUIRE n.pid IS UNIQUE;\nCREATE CONSTRAINT thread_composite IF NOT EXISTS FOR (n:Thread) REQUIRE (n.tid, n.pid) IS UNIQUE;\nCREATE CONSTRAINT thread_composite IF NOT EXISTS FOR (n:Thread) REQUIRE (n.tid, n.pid) IS UNIQUE;\nCREATE CONSTRAINT file_composite IF NOT EXISTS FOR (n:File) REQUIRE (n.inode, n.device_id) IS UNIQUE;\nCREATE CONSTRAINT file_composite IF NOT EXISTS FOR (n:File) REQUIRE (n.inode, n.device_id) IS UNIQUE;\nCREATE CONSTRAINT socket_socket_id IF NOT EXISTS FOR (n:Socket) REQUIRE n.socket_id IS UNIQUE;\nCREATE CONSTRAINT cpu_cpu_id IF NOT EXISTS FOR (n:CPU) REQUIRE n.cpu_id IS UNIQUE;\nCREATE CONSTRAINT memoryregion_composite IF NOT EXISTS FOR (n:MemoryRegion) REQUIRE (n.start_address, n.pid) IS UNIQUE;\nCREATE CONSTRAINT memoryregion_composite IF NOT EXISTS FOR (n:MemoryRegion) REQUIRE (n.start_address, n.pid) IS UNIQUE;\nCREATE CONSTRAINT syscallevent_event_id IF NOT EXISTS FOR (n:SyscallEvent) REQUIRE n.event_id IS UNIQUE;\nCREATE CONSTRAINT syscalltype_name IF NOT EXISTS FOR (n:SyscallType) REQUIRE n.name IS UNIQUE;\nCREATE CONSTRAINT timer_timer_id IF NOT EXISTS FOR (n:Timer) REQUIRE n.timer_id IS UNIQUE;\n\n// Create indexes for query performance\nCREATE INDEX process_name IF NOT EXISTS FOR (n:Process) ON (n.name);\nCREATE INDEX process_start_time IF NOT EXISTS FOR (n:Process) ON (n.start_time);\nCREATE INDEX process_ppid IF NOT EXISTS FOR (n:Process) ON (n.ppid);\nCREATE INDEX thread_name IF NOT EXISTS FOR (n:Thread) ON (n.name);\nCREATE INDEX thread_start_time IF NOT EXISTS FOR (n:Thread) ON (n.start_time);\nCREATE INDEX file_path IF NOT EXISTS FOR (n:File) ON (n.path);\nCREATE INDEX socket_family IF NOT EXISTS FOR (n:Socket) ON (n.family);\nCREATE INDEX socket_local_address IF NOT EXISTS FOR (n:Socket) ON (n.local_address);\nCREATE INDEX socket_remote_address IF NOT EXISTS FOR (n:Socket) ON (n.remote_address);\nCREATE INDEX memoryregion_region_type IF NOT EXISTS FOR (n:MemoryRegion) ON (n.region_type);\nCREATE INDEX syscallevent_syscall_name IF NOT EXISTS FOR (n:SyscallEvent) ON (n.syscall_name);\nCREATE INDEX syscallevent_timestamp IF NOT EXISTS FOR (n:SyscallEvent) ON (n.timestamp);\nCREATE INDEX syscallevent_tid IF NOT EXISTS FOR (n:SyscallEvent) ON (n.tid);\nCREATE INDEX syscallevent_cpu_id IF NOT EXISTS FOR (n:SyscallEvent) ON (n.cpu_id);\nCREATE INDEX syscalltype_category IF NOT EXISTS FOR (n:SyscallType) ON (n.category);\nCREATE INDEX timer_function_name IF NOT EXISTS FOR (n:Timer) ON (n.function_name);\nCREATE INDEX timer_expires_at IF NOT EXISTS FOR (n:Timer) ON (n.expires_at);\nCREATE INDEX irq_irq_number IF NOT EXISTS FOR (n:IRQ) ON (n.irq_number);\nCREATE INDEX irq_timestamp IF NOT EXISTS FOR (n:IRQ) ON (n.timestamp);\nCREATE INDEX irq_cpu_id IF NOT EXISTS FOR (n:IRQ) ON (n.cpu_id);\n\n// Wait for all indexes to come online\nCALL db.awaitIndexes();